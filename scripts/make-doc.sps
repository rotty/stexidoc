(import (except (rnrs) delete-file file-exists?)
        (spells condition)
        (spells filesys)
        (stexidoc html))

(define (out port . args)
  (for-each (lambda (x)
              (display x port))
            args))

(define (format-exception e port)
  (define (format indent c)
    (when (message-condition? c)
      (out port (make-string indent #\space) (condition-message c)))
    (when (irritants-condition? c)
      (out port " [")
      (let loop ((is (condition-irritants c)))
        (unless (null? is)
          (write (car is) port)
          (unless (null? (cdr is))
            (out port " "))
          (loop (cdr is))))
      (out port "]"))
    (when (stacked-condition? c)
      (display ":" port))
    (display "\n" port)
    (if (stacked-condition? c)
        (format (+ indent 2) (next-condition c))))
  (format 0 e))

(define (main argv)
  (let ((title (cadr argv))
        (dir (caddr argv)))
    (for-each display `("Generating system reference in " ,dir #\newline))
    (create-directory* dir)
    (guard (c ((error? c)
               (format-exception c (current-error-port))
               (exit 1)))
      (apply systems->html title (cddr argv))
      (exit 0))))

(main (command-line))

(define (out port . args)
  (for-each (lambda (x)
              (display x port))
            args))

(define (format-exception e port)
  (define (format indent c)
    (when (message-condition? c)
      (out port (make-string indent #\space) (condition-message c)))
    (when (irritants-condition? c)
      (out port " [")
      (let loop ((is (condition-irritants c)))
        (unless (null? is)
          (write (car is) port)
          (unless (null? (cdr is))
            (out port " "))
          (loop (cdr is))))
      (out port "]"))
    (when (stacked-condition? c)
      (display ":" port))
    (display "\n" port)
    (if (stacked-condition? c)
        (format (+ indent 2) (next-condition c))))
  (format 0 e))

(define (maybe-symbol->string x)
  (if (symbol? x) (symbol->string x) x))

;; arch-tag: 093180ca-4e45-4f17-8ecc-58b10e4d16b9
